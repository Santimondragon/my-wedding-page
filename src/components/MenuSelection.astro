---
import Button from '../components/Button.astro';
import type { Database } from '../lib/database.types';
import { dishes, kidsDishes } from '../constants';

interface Props {
  guests: Database['public']['Tables']['guests']['Row'][];
}

const { guests } = Astro.props;
---

<section class="menu-selection section-content">
  <div class="menu-selection__content">
    <h2 class="heading heading--section">Elige tu plato</h2>
    {
      guests.every((g) => g.menu === null) && (
        <>
          <p class="text text--italic">Antes del 20 de Septiembre</p>
          <p class="menu-selection__content-text text">
            Queremos que disfrutes de una experiencia deliciosa en nuestra boda. Por favor,
            selecciona el plato principal que deseas:
          </p>
        </>
      )
    }
  </div>

  <form id="menu-selection-form" class="menu-selection-form">
    {
      guests
        .filter((guest) => guest.rsvp)
        .map((guest) => {
          const selectedDishes = guest.is_kid_menu ? kidsDishes : dishes;

          return (
            <fieldset class="guest-section">
              <legend class="heading heading--4 guest-name">{guest.name}</legend>

              {guest.menu === null ? (
                <div class="options-wrapper">
                  {Object.entries(selectedDishes).map(([key, value]) => (
                    <div class="option">
                      <input
                        type="radio"
                        id={`${key}-${guest.id}`}
                        name={`guest-${guest.id}`}
                        value={Number(key)}
                        checked={guest.menu === Number(key)}
                        required
                      />
                      <label class="text" for={`${key}-${guest.id}`}>
                        {value.description}
                      </label>
                    </div>
                  ))}
                </div>
              ) : (
                <>
                  <p class="text text--italic">¡Selección confirmada!</p>
                  <p class="text">{selectedDishes[guest.menu].description}</p>
                </>
              )}
            </fieldset>
          );
        })
    }

    {
      guests.every((g) => g.menu === null) && (
        <>
          <p id="form-status" class="text text--status" style="display: none;" />
          <Button
            id="submit-button"
            text={`Confirmar Plato${guests.length > 1 ? 's' : ''}`}
            color="black"
            type="submit"
          />
        </>
      )
    }
  </form>
</section>

<style>
  .menu-selection {
    align-items: flex-start;
    height: fit-content;

    .text {
      text-wrap: balance;
      text-wrap: pretty;
      line-height: 1.35;

      &--special {
        color: var(--black);
        font-weight: bold;
        font-style: italic;
      }
    }

    .menu-selection__content {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.8rem;
    }

    .menu-selection__content-text {
      padding: 2.4rem 0;
    }

    .menu-selection__disclaimer {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      margin-top: 3.2rem;
      list-style: none;
      width: 100%;

      li {
        position: relative;
        display: flex;
        align-items: flex-start;
        width: 100%;
        gap: 1.6rem;

        &:before {
          width: 1.6rem;
          display: flex;
          justify-content: flex-end;
          align-items: flex-end;
          font-size: 2rem;
        }

        &:nth-child(1):before {
          content: '*';
        }

        &:nth-child(2):before {
          content: '**';
        }
      }
    }

    .menu-selection-form {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 3.2rem;

      .guest-section {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 2rem;
        padding-top: 1.6rem !important;
        margin: 0;
        padding: 0;
        border: none;
        width: 100%;

        .options-wrapper {
          display: flex;
          flex-direction: column;
          gap: 2rem;

          .option {
            display: flex;
            align-items: center;
            gap: 1.6rem;

            input {
              flex-shrink: 0;
              width: 2.4rem;
              height: 2.4rem;
              accent-color: var(--black);
            }
          }
        }
      }
    }
  }
</style>

<script>
  import { updateGuestMenu } from '../lib/invitations';

  const form = document.getElementById('menu-selection-form');
  const formStatus = document.getElementById('form-status');
  const submitButton = form?.querySelector('button[type="submit"]');

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!formStatus || !submitButton) return;

    // Show loading state
    formStatus.style.display = 'block';
    formStatus.textContent = 'Enviando respuestas...';
    formStatus.className = 'text text--status';
    submitButton.textContent = 'Enviando...';
    (submitButton as HTMLButtonElement).style.display = 'none';
    formStatus.textContent = 'Guardando respuestas...';
    formStatus.className = 'text text--status';

    const formData = new FormData(e.target as HTMLFormElement);
    const updates: Promise<boolean>[] = [];

    // Process each guest's menu-selection
    for (const [key, value] of formData.entries()) {
      if (key.startsWith('guest-')) {
        const guestId = key.replace('guest-', '');
        updates.push(updateGuestMenu(guestId, Number(value) as 1 | 2 | 3));
      }
    }

    try {
      // Update all guests
      await Promise.all(updates);

      // Show success message
      formStatus.textContent = '¡Gracias por confirmar tu plato!';
      formStatus.className = 'text text--status text--success';
    } catch (error) {
      console.error('Error updating RSVPs:', error);
      formStatus.textContent =
        'Hubo un error al guardar tu respuesta. Por favor, intenta de nuevo.';
      formStatus.className = 'text text--status text--error';
      if (submitButton instanceof HTMLButtonElement) {
        submitButton.style.display = 'none';
      }
    }
  });
</script>
