---
import { getSupabase } from '../lib/supabase';
import Button from '../components/Button.astro';

const supabase = getSupabase();

interface Guest {
  id: string;
  name: string;
  rsvp: boolean | null;
  menu: string | null;
  is_special_guest: boolean;
}

interface Invitation {
  id: string;
  guests: Guest[];
}

const { invitation_id } = Astro.params;

// Get invitation with its guests
const { data: invitation } = await supabase
  .from('invitations')
  .select(
    `
    id,
    guests (
      id,
      name,
      rsvp,
      menu,
      is_special_guest
    )
  `
  )
  .eq('id', invitation_id)
  .single();

// If no invitation found, redirect to home
if (!invitation) {
  return Astro.redirect('/');
}

// Sort guests by name
const guests = invitation.guests?.sort((a, b) => a.name.localeCompare(b.name)) || [];
---

<section class="rsvp">
  <h2 class="heading heading--section">RSVP</h2>
  <p class="text">Antes del 10 de Julio</p>

  <form id="rsvp-form" class="rsvp-form">
    {
      guests.map((guest) => (
        <fieldset class="guest-section">
          <legend class="heading heading--4 guest-name">{guest.name}</legend>
          <div class="options-wrapper">
            <div class="option">
              <input
                type="radio"
                id={`yes-${guest.id}`}
                name={`guest-${guest.id}`}
                value="attending"
                checked={guest.rsvp === true}
                required
              />
              <label class="text" for={`yes-${guest.id}`}>
                ¡Sí, asistiré!
              </label>
            </div>
            <div class="option">
              <input
                type="radio"
                id={`no-${guest.id}`}
                name={`guest-${guest.id}`}
                value="not_attending"
                checked={guest.rsvp === false}
              />
              <label class="text" for={`no-${guest.id}`}>
                Lamentablemente no podré asistir.
              </label>
            </div>
            {guest.rsvp === true && (
              <div class="menu-selection">
                <p class="text">Selecciona tu menú:</p>
                <select
                  name={`menu-${guest.id}`}
                  required={guest.rsvp === true}
                  value={guest.menu || undefined}
                >
                  <option value="">Selecciona una opción</option>
                  <option value="1">Menú 1 - Carne</option>
                  <option value="2">Menú 2 - Pollo</option>
                  <option value="3">Menú 3 - Vegetariano</option>
                </select>
              </div>
            )}
          </div>
        </fieldset>
      ))
    }

    <p class="text text--italic">
      ** Los niños nos acompañan en el corazón, pero esta vez la fiesta es solo para los grandes.
    </p>
    <div class="form-actions">
      <Button text="Enviar" color="black" type="submit" />
      <p id="form-status" class="text text--status"></p>
    </div>
  </form>
</section>

<style>
  .rsvp {
    display: flex;
    flex-direction: column;
    padding: 2.4rem 3.2rem;
    background-color: var(--white);

    .text {
      text-wrap: balance;
      text-wrap: pretty;
      line-height: 1.35;

      &.text--error {
        color: red;
        text-align: center;
        margin: 2rem 0;
      }

      &.text--success {
        color: #28a745;
        text-align: center;
        margin: 2rem 0;
      }

      &.text--status {
        margin-top: 1rem;
        text-align: center;
      }
    }

    .rsvp-form {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 3.2rem;
      margin-top: 3.2rem;

      .guest-section {
        padding-top: 1.6rem !important;
        margin: 0;
        padding: 0;
        border: none;
        width: 100%;

        .options-wrapper {
          display: flex;
          flex-direction: column;
          gap: 1.6rem;

          .option {
            display: flex;
            gap: 1.6rem;

            input {
              width: 2.4rem;
              height: 2.4rem;
              accent-color: var(--black);
            }
          }

          .menu-selection {
            margin-top: 1.6rem;
            padding-left: 4rem;

            select {
              margin-top: 0.8rem;
              padding: 0.8rem;
              width: 100%;
              border: 1px solid var(--black);
              border-radius: 0.4rem;
              font-size: 1.6rem;
            }
          }
        }
      }
    }

    .form-actions {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  }
</style>

<script>
  import { updateGuestRSVP } from '../lib/invitations';

  const form = document.getElementById('rsvp-form');
  const formStatus = document.getElementById('form-status');
  const submitButton = form?.querySelector('button[type="submit"]');

  // Handle radio button changes to show/hide menu selection
  document.querySelectorAll('input[type="radio"]').forEach((radio) => {
    radio.addEventListener('change', (e) => {
      const target = e.target as HTMLInputElement;
      const guestId = target.name.replace('guest-', '');
      const menuSelection = target.closest('.options-wrapper')?.querySelector('.menu-selection');

      if (target.value === 'attending') {
        if (!menuSelection) {
          const wrapper = document.createElement('div');
          wrapper.className = 'menu-selection';
          wrapper.innerHTML = `
            <p class="text">Selecciona tu menú:</p>
            <select name="menu-${guestId}" required>
              <option value="">Selecciona una opción</option>
              <option value="1">Menú 1 - Carne</option>
              <option value="2">Menú 2 - Pollo</option>
              <option value="3">Menú 3 - Vegetariano</option>
            </select>
          `;
          target.closest('.options-wrapper')?.appendChild(wrapper);
        }
      } else {
        menuSelection?.remove();
      }
    });
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!formStatus || !submitButton) return;

    // Disable submit button and show loading state
    (submitButton as HTMLButtonElement).disabled = true;
    formStatus.textContent = 'Guardando respuestas...';
    formStatus.className = 'text text--status';

    const formData = new FormData(e.target as HTMLFormElement);
    const updates: Promise<boolean>[] = [];

    // Process each guest's RSVP
    for (const [key, value] of formData.entries()) {
      if (key.startsWith('guest-')) {
        const guestId = key.replace('guest-', '');
        const rsvp = value === 'attending';
        const menu = formData.get(`menu-${guestId}`);

        updates.push(
          updateGuestRSVP(
            guestId,
            rsvp,
            menu ? (parseInt(menu.toString()) as 1 | 2 | 3) : undefined
          )
        );
      }
    }

    try {
      // Update all guests
      await Promise.all(updates);

      // Show success message
      formStatus.textContent = '¡Gracias por confirmar tu asistencia!';
      formStatus.className = 'text text--status text--success';

      // Reload after a short delay
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } catch (error) {
      console.error('Error updating RSVPs:', error);
      formStatus.textContent =
        'Hubo un error al guardar tu respuesta. Por favor, intenta de nuevo.';
      formStatus.className = 'text text--status text--error';
      if (submitButton instanceof HTMLButtonElement) {
        submitButton.disabled = false;
      }
    }
  });
</script>
