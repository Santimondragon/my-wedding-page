---
import Button from '../components/Button.astro';
import type { Database } from '../lib/database.types';

interface Props {
  guests: Database['public']['Tables']['guests']['Row'][];
  isSpecialInvitation: boolean;
  deadline: string;
}

const { guests, deadline } = Astro.props;
---

<section class="rsvp section-content">
  <div class="rsvp__content">
    <h2 class="heading heading--section">RSVP</h2>
    <p class="text">Confirmar asistencia antes del {deadline}</p>
  </div>

  <form id="rsvp-form" class="rsvp-form">
    {
      guests.map((guest) => (
        <fieldset class="guest-section">
          <legend class="heading heading--4 guest-name">{guest.name}</legend>
          {guest.rsvp === null && (
            <div class="options-wrapper">
              <div class="option">
                <input
                  type="radio"
                  id={`yes-${guest.id}`}
                  name={`guest-${guest.id}`}
                  value="attending"
                  checked={guest.rsvp === true}
                  required
                />
                <label class="text" for={`yes-${guest.id}`}>
                  ¡Sí, asistiré!
                </label>
              </div>
              <div class="option">
                <input
                  type="radio"
                  id={`no-${guest.id}`}
                  name={`guest-${guest.id}`}
                  value="not_attending"
                  checked={guest.rsvp === false}
                />
                <label class="text" for={`no-${guest.id}`}>
                  Lamentablemente no podré asistir.
                </label>
              </div>
            </div>
          )}
          {guest.rsvp === true && (
            <>
              <p class="text text--italic">¡Nos vemos en la celebración!</p>
              <p class="text">
                Estamos felices de saber que nos acompañarás en este día tan especial. Tu presencia
                hará que nuestra boda sea aún más inolvidable. ¡Gracias por compartir este momento
                con nosotros!
              </p>
            </>
          )}
          {guest.rsvp === false && (
            <>
              <p class="text text--italic">¡Te extrañaremos!</p>
              <p class="text">
                Lamentamos que no puedas acompañarnos en este día tan especial, pero entendemos y
                esperamos que nos acompañes en futuras celebraciones. ¡Gracias por ser parte de
                nuestras vidas!
              </p>
            </>
          )}
        </fieldset>
      ))
    }

    <ul class="rsvp__disclaimer text text--italic">
      <li>Una vez que envíes tu respuesta, no podrás cambiarla.</li>
      <li>
        Los niños nos acompañan en el corazón, pero esta vez la fiesta es solo para los grandes.
      </li>
    </ul>

    <article class="rsvp__rain">
      <span class="heading">Lluvia de Sobres</span>
    </article>
    {
      guests.every((g) => g.rsvp === null) && (
        <>
          <p id="form-status" class="text text--status" style="display: none;" />
          <Button id="submit-button" text="Enviar" color="black" type="submit" />
        </>
      )
    }
  </form>
</section>

<style>
  .rsvp {
    align-items: flex-start;
    height: fit-content;

    .text {
      text-wrap: balance;
      text-wrap: pretty;
      line-height: 1.35;

      &--special {
        color: var(--black);
        font-weight: bold;
        font-style: italic;
      }
    }

    .rsvp__content {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.8rem;
    }

    .rsvp__disclaimer {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      margin-top: 3.2rem;
      list-style: none;
      width: 100%;

      li {
        position: relative;
        display: flex;
        align-items: flex-start;
        width: 100%;
        gap: 1.6rem;

        &:before {
          width: 1.6rem;
          display: flex;
          justify-content: flex-end;
          align-items: flex-end;
          font-size: 2rem;
        }

        &:nth-child(1):before {
          content: '*';
        }

        &:nth-child(2):before {
          content: '**';
        }
      }
    }

    .rsvp__rain {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      width: 100%;
      border-bottom: 1px solid var(--black);
      border-top: 1px solid var(--black);

      .heading {
        font-size: 3.2rem;
        padding: 4.2rem 0;
      }
    }

    .rsvp-form {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 3.2rem;

      .guest-section {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 1.2rem;
        padding-top: 1.6rem !important;
        margin: 0;
        padding: 0;
        border: none;
        width: 100%;

        .options-wrapper {
          display: flex;
          flex-direction: column;
          gap: 1.6rem;

          .option {
            display: flex;
            gap: 1.6rem;

            input {
              width: 2.4rem;
              height: 2.4rem;
              accent-color: var(--black);
            }
          }
        }
      }
    }
  }
</style>

<script>
  import { updateGuestRSVP } from '../lib/invitations';

  const form = document.getElementById('rsvp-form');
  const formStatus = document.getElementById('form-status');
  const submitButton = form?.querySelector('button[type="submit"]');

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!formStatus || !submitButton) return;

    // Show loading state
    formStatus.style.display = 'block';
    formStatus.textContent = 'Enviando respuestas...';
    formStatus.className = 'text text--status';
    submitButton.textContent = 'Enviando...';
    (submitButton as HTMLButtonElement).style.display = 'none';
    formStatus.textContent = 'Guardando respuestas...';
    formStatus.className = 'text text--status';

    const formData = new FormData(e.target as HTMLFormElement);
    const updates: Promise<boolean>[] = [];

    // Process each guest's RSVP
    for (const [key, value] of formData.entries()) {
      if (key.startsWith('guest-')) {
        const guestId = key.replace('guest-', '');
        const rsvp = value === 'attending';

        updates.push(updateGuestRSVP(guestId, rsvp));
      }
    }

    try {
      // Update all guests
      await Promise.all(updates);

      // Show success message
      formStatus.textContent = '¡Gracias por confirmar tu asistencia!';
      formStatus.className = 'text text--status text--success';
    } catch (error) {
      console.error('Error updating RSVPs:', error);
      formStatus.textContent =
        'Hubo un error al guardar tu respuesta. Por favor, intenta de nuevo.';
      formStatus.className = 'text text--status text--error';
      if (submitButton instanceof HTMLButtonElement) {
        submitButton.style.display = 'none';
      }
    }
  });
</script>
