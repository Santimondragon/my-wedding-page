---
import '../styles/index.css';

import AdminLayout from '../layouts/AdminLayout.astro';
import { checkAuth } from '../middleware/auth';
import { getSupabase } from '../lib/supabase';
import {
  Mail,
  Users,
  CheckCircle,
  Clock,
  Plus,
  Search,
  Copy,
  Trash2,
  Star,
  Calendar,
  MailOpen,
  Save,
  ChevronDown,
  ChevronUp,
  Send,
} from 'lucide-astro';

const { isAuthorized } = await checkAuth(Astro);

if (!isAuthorized) {
  return Astro.redirect('/login');
}

const supabase = getSupabase();

// Get all invitations with their guests and statistics
const { data: invitations } = await supabase
  .from('invitations')
  .select(
    `
    id,
    title,
    created_at,
    updated_at,
    is_special_invitation,
    is_sent,
    guests (
      id,
      name,
      rsvp,
      menu
    )
  `
  )
  .order('created_at', { ascending: false });

// Calculate statistics
const totalInvitations = invitations?.length || 0;
const totalGuests = invitations?.reduce((acc, inv) => acc + (inv.guests?.length || 0), 0) || 0;
const confirmedGuests =
  invitations?.reduce(
    (acc, inv) => acc + (inv.guests?.filter((g) => g.rsvp === true).length || 0),
    0
  ) || 0;
const pendingGuests =
  invitations?.reduce(
    (acc, inv) => acc + (inv.guests?.filter((g) => g.rsvp === null).length || 0),
    0
  ) || 0;
---

<AdminLayout title="Manage Invitations">
  <main class="admin-dashboard">
    <!-- Header -->
    <header class="dashboard-header">
      <div class="header-content">
        <h1 class="dashboard-title">Invitation Management</h1>
        <p class="dashboard-subtitle">Manage wedding invitations and track RSVPs</p>
      </div>
    </header>

    <!-- Statistics Cards -->
    <section class="stats-grid">
      <div class="stat-card">
        <div class="stat-icon stat-icon--primary">
          <Mail size={24} />
        </div>
        <div class="stat-content">
          <h3 class="stat-number">{totalInvitations}</h3>
          <p class="stat-label">Total Invitations</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon stat-icon--secondary">
          <Users size={24} />
        </div>
        <div class="stat-content">
          <h3 class="stat-number">{totalGuests}</h3>
          <p class="stat-label">Total Guests</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon stat-icon--success">
          <CheckCircle size={24} />
        </div>
        <div class="stat-content">
          <h3 class="stat-number">{confirmedGuests}</h3>
          <p class="stat-label">Confirmed</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon stat-icon--warning">
          <Clock size={24} />
        </div>
        <div class="stat-content">
          <h3 class="stat-number">{pendingGuests}</h3>
          <p class="stat-label">Pending</p>
        </div>
      </div>
    </section>

    <!-- Main Content Grid -->
    <div class="content-grid">
      <!-- Create Invitation Panel -->
      <section class="panel create-panel">
        <div class="panel-header">
          <div class="panel-header-content">
            <div class="panel-icon">
              <MailOpen size={20} />
            </div>
            <div>
              <h2 class="panel-title">Create New Invitation</h2>
              <p class="panel-description">Add a new invitation with guest details</p>
            </div>
          </div>
        </div>

        <form id="invitation-form" class="invitation-form">
          <div class="form-row">
            <div class="form-group">
              <label for="invitation-title" class="form-label">
                Invitation Title
                <span class="required">*</span>
              </label>
              <input
                type="text"
                id="invitation-title"
                name="invitation-title"
                required
                class="form-input"
                placeholder="e.g., Smith Family"
              />
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="guest-names" class="form-label">
                Guest Names
                <span class="required">*</span>
                <span class="form-hint">One name per line</span>
              </label>
              <textarea
                id="guest-names"
                name="guest-names"
                required
                class="form-textarea"
                rows="4"
                placeholder="John Doe"></textarea>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label class="checkbox-container">
                <input
                  type="checkbox"
                  id="is-special-invitation"
                  name="is-special-invitation"
                  class="checkbox-input"
                />
                <span class="checkbox-checkmark"></span>
                <span class="checkbox-label">
                  <Star size={16} class="inline-icon" />
                  Mark as Special Invitation
                </span>
              </label>
            </div>
          </div>

          <div class="form-actions">
            <button type="submit" class="btn btn-primary">
              <Plus size={16} />
              Create Invitation
            </button>
          </div>
        </form>
      </section>

      <!-- Invitations List Panel -->
      <section class="panel list-panel">
        <div class="panel-header">
          <div class="panel-header-content">
            <div class="panel-icon">
              <Users size={20} />
            </div>
            <div>
              <h2 class="panel-title">Existing Invitations</h2>
            </div>
          </div>
          <div class="panel-actions">
            <div class="filter-box">
              <select id="filter-sent" class="filter-select">
                <option value="all">All Invitations</option>
                <option value="sent">Sent</option>
                <option value="unsent">Not Sent</option>
              </select>
            </div>
            <div class="search-box">
              <Search size={16} class="search-icon" />
              <input
                type="text"
                id="search-invitations"
                placeholder="Search invitations..."
                class="search-input"
              />
            </div>
          </div>
        </div>

        <div id="invitations-container" class="invitations-list">
          {
            invitations?.length === 0 ? (
              <div class="empty-state">
                <div class="empty-icon">
                  <MailOpen size={48} />
                </div>
                <h3>No invitations yet</h3>
                <p>Create your first invitation to get started</p>
              </div>
            ) : (
              invitations?.map((invitation) => (
                <div class="invitation-card" data-id={invitation.id}>
                  <div class="card-header">
                    <div class="card-title-section">
                      <h3 class="card-title">{invitation.title}</h3>
                      {invitation.is_special_invitation && (
                        <span class="special-badge">
                          <Star size={12} />
                          Special
                        </span>
                      )}
                    </div>
                    <div class="card-actions">
                      <label
                        class="sent-checkbox-container"
                        title={invitation.is_sent ? 'Invitation has been sent' : 'Mark as sent'}
                      >
                        <input
                          type="checkbox"
                          class="sent-checkbox"
                          checked={invitation.is_sent}
                          disabled={invitation.is_sent}
                        />
                        <Send size={16} />
                      </label>
                      <button
                        class="btn btn-icon btn-copy"
                        data-link={`https://www.auraysantisecasan.com/${invitation.id}`}
                        title="Copy invitation link"
                      >
                        <Copy size={16} />
                      </button>
                      <button
                        class="btn btn-icon btn-delete"
                        data-action="delete"
                        title="Delete invitation"
                      >
                        <Trash2 size={16} />
                      </button>
                      <button class="btn btn-icon btn-toggle" title="Toggle details">
                        <ChevronDown size={16} class="icon-expand" />
                        <ChevronUp size={16} class="icon-collapse" />
                      </button>
                    </div>
                  </div>

                  <div class="card-content">
                    <div class="invitation-link">
                      <label class="link-label">Invitation Link:</label>
                      <div class="link-container">
                        <code class="invitation-url">auraysantisecasan.com/{invitation.id}</code>
                      </div>
                    </div>

                    <div class="guests-section">
                      <h4 class="guests-title">
                        <Users size={16} class="inline-icon" />
                        Guests ({invitation.guests?.length || 0})
                      </h4>
                      <div class="guests-grid">
                        {invitation.guests?.map((guest) => (
                          <div class="guest-item" data-guest-id={guest.id}>
                            <span
                              class={`rsvp-badge rsvp-${
                                guest.rsvp === true
                                  ? 'confirmed'
                                  : guest.rsvp === false
                                    ? 'declined'
                                    : 'pending'
                              }`}
                            >
                              {guest.rsvp === true ? (
                                <>
                                  <CheckCircle size={12} />
                                  Confirmed
                                </>
                              ) : guest.rsvp === false ? (
                                <>
                                  <Trash2 size={12} />
                                  Declined
                                </>
                              ) : (
                                <>
                                  <Clock size={12} />
                                  Pending
                                </>
                              )}
                            </span>
                            <input
                              type="text"
                              class="guest-name-input"
                              value={guest.name}
                              data-original-value={guest.name}
                            />
                            <div class="guest-actions">
                              <button class="guest-action-btn save hidden" title="Save changes">
                                <Save size={14} />
                              </button>
                              <button class="guest-action-btn delete" title="Remove guest">
                                <Trash2 size={14} />
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <div class="card-meta">
                      <span class="meta-item">
                        <Calendar size={12} class="inline-icon" />
                        Created: {new Date(invitation.created_at).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                </div>
              ))
            )
          }
        </div>
      </section>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>
  </main>
</AdminLayout>

<style>
  /* Reset and Base Styles */
  .admin-dashboard {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
    background: var(--white);
    min-height: 100vh;
    font-family:
      -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    font-size: 1.4rem;
    line-height: 1.6;
    color: var(--gray-800);
  }

  /* Header Styles */
  .dashboard-header {
    margin-bottom: 3rem;
    text-align: center;
  }

  .dashboard-title {
    font-size: 3.2rem;
    font-weight: 700;
    color: var(--black);
    margin-bottom: 0.8rem;
    letter-spacing: -0.025em;
  }

  .dashboard-subtitle {
    font-size: 1.6rem;
    color: var(--gray-600);
    margin: 0;
    font-weight: 400;
  }

  /* Statistics Grid */
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .stat-card {
    background: var(--white);
    border-radius: 1.6rem;
    padding: 2.4rem;
    box-shadow:
      0 1px 3px rgba(0, 0, 0, 0.05),
      0 1px 2px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--gray-200);
    display: flex;
    align-items: center;
    gap: 1.6rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow:
      0 4px 6px rgba(0, 0, 0, 0.05),
      0 10px 15px rgba(0, 0, 0, 0.1);
  }

  .stat-icon {
    width: 6rem;
    height: 6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 1.2rem;
    color: var(--white);
    flex-shrink: 0;
  }

  .stat-icon--primary {
    background: var(--blue);
  }

  .stat-icon--secondary {
    background: var(--gray-700);
  }

  .stat-icon--success {
    background: #059669;
  }

  .stat-icon--warning {
    background: #d97706;
  }

  .stat-content {
    flex: 1;
  }

  .stat-number {
    font-size: 2.8rem;
    font-weight: 700;
    color: var(--black);
    margin: 0 0 0.4rem 0;
    line-height: 1.2;
  }

  .stat-label {
    font-size: 1.4rem;
    color: var(--gray-600);
    margin: 0;
    font-weight: 500;
  }

  /* Content Grid */
  .content-grid {
    display: grid;
    grid-template-columns: 400px 1fr;
    gap: 2.4rem;
    align-items: start;
  }

  @media (max-width: 1024px) {
    .content-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Panel Styles */
  .panel {
    background: var(--white);
    border-radius: 1.6rem;
    box-shadow:
      0 1px 3px rgba(0, 0, 0, 0.05),
      0 1px 2px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--gray-200);
    overflow: hidden;
  }

  .panel-header {
    padding: 2.4rem;
    border-bottom: 1px solid var(--gray-200);
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--gray-100);
  }

  .panel-header-content {
    display: flex;
    align-items: center;
    gap: 1.2rem;
  }

  .panel-icon {
    width: 4.8rem;
    height: 4.8rem;
    background: var(--white);
    border-radius: 1.2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--blue);
    border: 1px solid var(--gray-200);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .panel-title {
    font-size: 1.8rem;
    font-weight: 600;
    color: var(--black);
    margin: 0 0 0.4rem 0;
  }

  .panel-description {
    font-size: 1.4rem;
    color: var(--gray-600);
    margin: 0;
  }

  .panel-actions {
    display: flex;
    align-items: center;
    gap: 1.2rem;
  }

  /* Form Styles */
  .invitation-form {
    padding: 2.4rem;
  }

  .form-row {
    margin-bottom: 2rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-label {
    font-size: 1.4rem;
    font-weight: 600;
    color: var(--gray-800);
    margin-bottom: 0.8rem;
    display: flex;
    align-items: center;
    gap: 0.8rem;
  }

  .required {
    color: #dc2626;
    font-weight: 700;
  }

  .form-hint {
    font-size: 1.2rem;
    color: var(--gray-500);
    font-weight: 400;
  }

  .form-input,
  .form-textarea {
    padding: 1.2rem 1.6rem;
    border: 1px solid var(--gray-300);
    border-radius: 1.2rem;
    font-size: 1.4rem;
    transition: all 0.2s ease;
    background: var(--white);
    color: var(--gray-800);
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: var(--blue);
    box-shadow: 0 0 0 3px rgba(65, 76, 122, 0.1);
  }

  .form-textarea {
    resize: vertical;
    min-height: 120px;
    font-family: inherit;
  }

  /* Checkbox Styles */
  .checkbox-container {
    display: flex;
    align-items: center;
    gap: 1.2rem;
    cursor: pointer;
    padding: 1.2rem 0;
  }

  .checkbox-input {
    display: none;
  }

  .checkbox-checkmark {
    width: 2rem;
    height: 2rem;
    border: 2px solid var(--gray-300);
    border-radius: 0.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    background: var(--white);
  }

  .checkbox-input:checked + .checkbox-checkmark {
    background: var(--blue);
    border-color: var(--blue);
  }

  .checkbox-input:checked + .checkbox-checkmark::after {
    content: '✓';
    color: var(--white);
    font-size: 1.2rem;
    font-weight: 700;
  }

  .checkbox-label {
    font-size: 1.4rem;
    color: var(--gray-800);
    display: flex;
    align-items: center;
    gap: 0.8rem;
    font-weight: 500;
  }

  /* Button Styles */
  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.8rem;
    padding: 1.2rem 2.4rem;
    border: none;
    border-radius: 1.2rem;
    font-size: 1.4rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    font-family: inherit;
  }

  .btn-primary {
    background: var(--blue);
    color: var(--white);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .btn-primary:hover {
    background: var(--gray-800);
    transform: translateY(-1px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .btn-icon {
    padding: 1rem;
    min-width: auto;
  }

  .btn-copy {
    background: var(--gray-100);
    color: var(--gray-700);
    border: 1px solid var(--gray-200);
  }

  .btn-copy:hover {
    background: var(--gray-200);
    color: var(--gray-800);
  }

  .btn-delete {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  .btn-delete:hover {
    background: #fee2e2;
    color: #b91c1c;
  }

  .btn-toggle {
    background: var(--gray-100);
    color: var(--gray-700);
    border: 1px solid var(--gray-200);
  }

  .btn-toggle:hover {
    background: var(--gray-200);
    color: var(--gray-800);
  }

  .btn-toggle .icon-collapse {
    display: none;
  }

  .invitation-card.expanded .btn-toggle .icon-expand {
    display: none;
  }

  .invitation-card.expanded .btn-toggle .icon-collapse {
    display: block;
  }

  /* Search and Filter */
  .search-box {
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-input {
    padding: 1rem 1.6rem 1rem 4rem;
    border: 1px solid var(--gray-300);
    border-radius: 1.2rem;
    font-size: 1.4rem;
    width: 280px;
    background: var(--white);
    transition: all 0.2s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--blue);
    box-shadow: 0 0 0 3px rgba(65, 76, 122, 0.1);
  }

  .search-icon {
    position: absolute;
    left: 1.4rem;
    color: var(--gray-500);
    z-index: 1;
  }

  .filter-box {
    position: relative;
  }

  .filter-select {
    padding: 1rem 3.2rem 1rem 1.6rem;
    border: 1px solid var(--gray-300);
    border-radius: 1.2rem;
    font-size: 1.4rem;
    color: var(--gray-800);
    background-color: var(--white);
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%2364748b'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 1.2rem center;
    background-size: 1.6rem;
    transition: all 0.2s ease;
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--blue);
    box-shadow: 0 0 0 3px rgba(65, 76, 122, 0.1);
  }

  /* Invitations List */
  .invitations-list {
    padding: 2.4rem;
    display: flex;
    flex-direction: column;
    gap: 1.6rem;
    max-height: 700px;
    overflow-y: auto;
  }

  /* Custom scrollbar */
  .invitations-list::-webkit-scrollbar {
    width: 8px;
  }

  .invitations-list::-webkit-scrollbar-track {
    background: var(--gray-100);
    border-radius: 4px;
  }

  .invitations-list::-webkit-scrollbar-thumb {
    background: var(--gray-300);
    border-radius: 4px;
  }

  .invitations-list::-webkit-scrollbar-thumb:hover {
    background: var(--gray-400);
  }

  .invitation-card {
    border: 1px solid var(--gray-200);
    border-radius: 1.2rem;
    padding: 2rem;
    transition: all 0.3s ease;
    background: var(--white);
  }

  .invitation-card:hover {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    border-color: var(--gray-300);
  }

  .invitation-card .card-content {
    display: none;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--gray-200);
  }

  .invitation-card.expanded .card-content {
    display: block;
    animation: slideDown 0.3s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .card-title-section {
    display: flex;
    align-items: center;
    gap: 1.2rem;
  }

  .card-title {
    font-size: 1.8rem;
    font-weight: 600;
    color: var(--black);
    margin: 0;
  }

  .special-badge {
    background: linear-gradient(135deg, #f59e0b, #d97706);
    color: var(--white);
    padding: 0.4rem 1.2rem;
    border-radius: 2rem;
    font-size: 1.2rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.4rem;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .card-actions {
    display: flex;
    gap: 0.8rem;
  }

  .sent-checkbox-container {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    padding: 1rem;
    border-radius: 1rem;
    cursor: pointer;
    background: var(--gray-100);
    color: var(--gray-700);
    transition: all 0.2s ease;
    border: 1px solid var(--gray-200);
  }

  .sent-checkbox-container:hover {
    background: var(--gray-200);
  }

  .sent-checkbox-container input[type='checkbox'] {
    display: none;
  }

  .sent-checkbox-container:has(input[type='checkbox']:checked) {
    border-color: #46c19a;
    background-color: #e8fef6;
  }

  .sent-checkbox-container input[type='checkbox']:disabled + svg {
    cursor: not-allowed;
  }

  /* Invitation Details */
  .invitation-link {
    margin-bottom: 2rem;
  }

  .link-label {
    font-size: 1.2rem;
    color: var(--gray-600);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 600;
    margin-bottom: 0.8rem;
    display: block;
  }

  .invitation-url {
    background: var(--gray-100);
    padding: 1.2rem 1.6rem;
    border-radius: 0.8rem;
    font-size: 1.4rem;
    color: var(--gray-700);
    display: block;
    border: 1px solid var(--gray-200);
    font-family:
      'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  }

  .guests-section {
    margin-bottom: 2rem;
  }

  .guests-title {
    font-size: 1.6rem;
    font-weight: 600;
    color: var(--gray-800);
    margin: 0 0 1.6rem 0;
    display: flex;
    align-items: center;
    gap: 0.8rem;
  }

  .guests-grid {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
  }

  .guest-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.2rem 1.6rem;
    background: var(--gray-100);
    border-radius: 1rem;
    gap: 1.2rem;
    border: 1px solid var(--gray-200);
    transition: all 0.2s ease;
  }

  .guest-name {
    font-size: 0.875rem;
    color: #374151;
    flex: 1;
  }

  .guest-name-input {
    font-size: 0.875rem;
    color: #374151;
    background: transparent;
    border: 1px solid transparent;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    width: 100%;
    transition: all 0.2s;
  }

  .guest-name-input:focus {
    outline: none;
    border-color: #3b82f6;
    background: white;
  }

  .guest-name-input:not(:focus):hover {
    background: rgba(0, 0, 0, 0.03);
  }

  .guest-actions {
    display: flex;
    gap: 0.5rem;
    opacity: 0;
    transition: opacity 0.2s;
  }

  .guest-item:hover .guest-actions {
    opacity: 1;
  }

  .guest-action-btn {
    padding: 0.25rem;
    border: none;
    background: transparent;
    color: #6b7280;
    cursor: pointer;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
  }

  .guest-action-btn:hover {
    background: rgba(0, 0, 0, 0.05);
    color: #374151;
  }

  .guest-action-btn.save {
    color: #059669;
  }

  .guest-action-btn.delete {
    color: #dc2626;
  }

  .guest-action-btn.hidden {
    display: none;
  }

  .rsvp-badge {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.25rem;
    width: 10rem;
    padding: 0.4rem 1.2rem;
    border-radius: 0.8rem;
    font-size: 0.8rem;
    font-weight: 500;

    &.rsvp-pending {
      background: #fef3c7;
      color: #92400e;
    }

    &.rsvp-confirmed {
      background: #dcfce7;
      color: #166534;
    }

    &.rsvp-declined {
      background: #fee2e2;
      color: #dc2626;
    }
  }

  .card-meta {
    padding-top: 1rem;
    border-top: 1px solid #f1f5f9;
  }

  .meta-item {
    font-size: 0.75rem;
    color: #6b7280;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  /* Inline Icons */
  .inline-icon {
    display: inline-block;
    vertical-align: middle;
  }

  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: #6b7280;
  }

  .empty-icon {
    margin-bottom: 1rem;
    color: #9ca3af;
  }

  .empty-state h3 {
    margin: 0 0 0.5rem 0;
    color: #374151;
  }

  .empty-state p {
    margin: 0;
    font-size: 0.875rem;
  }

  /* Toast Notification */
  .toast {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: #1f2937;
    color: white;
    padding: 1rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    transform: translateY(100px);
    opacity: 0;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .toast.show {
    transform: translateY(0);
    opacity: 1;
  }

  /* Loading State */
  .loading {
    opacity: 0.6;
    pointer-events: none;
  }

  /* Responsive Design */
  @media (max-width: 1080px) {
    .stats-grid {
      grid-template-columns: 1fr 1fr;
    }
  }

  @media (max-width: 768px) {
    .admin-dashboard {
      padding: 1rem;
    }

    .stats-grid {
      grid-template-columns: 1fr;
    }

    .dashboard-title {
      font-size: 2rem;
    }

    .search-input {
      width: 200px;
    }

    .card-header {
      flex-direction: column;
      align-items: center;
      gap: 1rem;
    }

    .card-actions {
      align-self: flex-end;
    }

    .panel-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .panel-actions {
      align-self: stretch;
    }

    .search-box {
      width: 100%;
    }

    .search-input {
      width: 100%;
    }
  }

  .sent-checkbox-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    border-radius: 8px;
    cursor: pointer;
    background: #f3f4f6;
    color: #374151;
    transition: all 0.2s;
  }

  .sent-checkbox-container:hover {
    background: #e5e7eb;
  }

  .sent-checkbox-container input[type='checkbox'] {
    display: none;
  }

  .sent-checkbox-container input[type='checkbox']:checked + svg {
    color: #059669;
  }

  .sent-checkbox-container input[type='checkbox']:disabled + svg {
    cursor: not-allowed;
  }

  .btn-toggle {
    background: #f3f4f6;
    color: #374151;
  }

  .btn-toggle:hover {
    background: #e5e7eb;
  }

  .btn-toggle .icon-collapse {
    display: none;
  }

  .invitation-card.expanded .btn-toggle .icon-expand {
    display: none;
  }

  .invitation-card.expanded .btn-toggle .icon-collapse {
    display: block;
  }

  .panel-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .filter-box {
    position: relative;
    border: 1px solid var(--gray-200);
    border-radius: 0.5rem;
  }

  .filter-select {
    padding: 1rem 2.4rem 1rem 1.2rem;
    border: 1px solid var(--gray-200);
    border-radius: 1.2rem;
    font-size: 1.25rem;
    color: var(--gray-800);
    background-color: white;
    cursor: pointer;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%2364748b'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 0.5rem center;
    background-size: 1.25rem;
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--blue);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }
</style>

<script>
  import { getSupabase } from '../lib/supabase';

  // Toast notification function
  function showToast(message: string, type: 'success' | 'error' = 'success') {
    const toast = document.getElementById('toast');
    if (!toast) return;

    toast.textContent = message;
    toast.className = `toast show ${type}`;

    setTimeout(() => {
      toast.className = 'toast';
    }, 3000);
  }

  // Copy link functionality
  document.querySelectorAll('.btn-copy').forEach((button) => {
    button.addEventListener('click', async () => {
      const link = (button as HTMLButtonElement).dataset.link;
      if (link) {
        try {
          await navigator.clipboard.writeText(link);
          showToast('Invitation link copied to clipboard!');
        } catch (err) {
          console.error('Failed to copy text: ', err);
          showToast('Failed to copy link', 'error');
        }
      }
    });
  });

  // Filter and search functionality
  const filterSelect = document.getElementById('filter-sent') as HTMLSelectElement;
  const searchInput = document.getElementById('search-invitations') as HTMLInputElement;
  const invitationCards = document.querySelectorAll('.invitation-card');

  function filterInvitations() {
    const searchTerm = searchInput?.value.toLowerCase() || '';
    const filterValue = filterSelect?.value;

    invitationCards.forEach((card) => {
      const title = card.querySelector('.card-title')?.textContent?.toLowerCase() || '';
      const guestNames = Array.from(card.querySelectorAll('.guest-name-input'))
        .map((el) => (el as HTMLInputElement).value.toLowerCase())
        .join(' ');
      const isSent = (card.querySelector('.sent-checkbox') as HTMLInputElement)?.checked;

      const matchesSearch = title.includes(searchTerm) || guestNames.includes(searchTerm);
      const matchesFilter =
        filterValue === 'all' ||
        (filterValue === 'sent' && isSent) ||
        (filterValue === 'unsent' && !isSent);

      (card as HTMLElement).style.display = matchesSearch && matchesFilter ? 'block' : 'none';
    });
  }

  filterSelect?.addEventListener('change', filterInvitations);
  searchInput?.addEventListener('input', filterInvitations);

  // Form handling
  const form = document.getElementById('invitation-form') as HTMLFormElement;
  const titleInput = document.getElementById('invitation-title') as HTMLInputElement;
  const guestNamesTextarea = document.getElementById('guest-names') as HTMLTextAreaElement;
  const isSpecialInvitationCheckbox = document.getElementById(
    'is-special-invitation'
  ) as HTMLInputElement;

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Add loading state
    form.classList.add('loading');
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const originalText = submitButton.innerHTML;
    submitButton.innerHTML =
      '<svg class="animate-spin" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle><path d="m9 12 2 2 4-4"></path></svg> Creating...';

    const guestNames = guestNamesTextarea.value
      .split('\n')
      .map((name) => name.trim())
      .filter((name) => name);

    if (guestNames.length === 0) {
      showToast('Please enter at least one guest name', 'error');
      form.classList.remove('loading');
      submitButton.innerHTML = originalText;
      return;
    }

    try {
      const supabase = getSupabase();

      // Create the invitation
      const { data: invitation, error: invitationError } = await supabase
        .from('invitations')
        .insert({
          title: titleInput.value,
          is_special_invitation: isSpecialInvitationCheckbox.checked,
        })
        .select()
        .single();

      if (invitationError) throw invitationError;

      // Create the guests
      const { error: guestsError } = await supabase.from('guests').insert(
        guestNames.map((name) => ({
          invitation_id: invitation.id,
          name,
        }))
      );

      if (guestsError) {
        // Clean up the invitation if guest creation fails
        await supabase.from('invitations').delete().eq('id', invitation.id);
        throw guestsError;
      }

      // Success
      form.reset();
      showToast(`Invitation "${invitation.title}" created successfully!`);

      // Reload page after short delay
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    } catch (error) {
      console.error('Error creating invitation:', error);
      showToast('Error creating invitation. Please try again.', 'error');
    } finally {
      form.classList.remove('loading');
      submitButton.innerHTML = originalText;
    }
  });

  // Delete functionality
  document.querySelectorAll('.btn-delete').forEach((button) => {
    button.addEventListener('click', async (e) => {
      const invitationCard = (e.target as HTMLElement).closest('.invitation-card') as HTMLElement;
      const invitationId = invitationCard?.dataset.id;
      const invitationTitle = invitationCard?.querySelector('.card-title')?.textContent;

      if (!invitationId) return;

      if (
        confirm(
          `Are you sure you want to delete the invitation "${invitationTitle}"?\n\nThis action cannot be undone.`
        )
      ) {
        const originalContent = button.innerHTML;

        try {
          // Add loading state
          button.innerHTML =
            '<svg class="animate-spin" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle></svg>';
          (button as HTMLButtonElement).disabled = true;

          const supabase = getSupabase();
          const { error } = await supabase.from('invitations').delete().eq('id', invitationId);

          if (error) throw error;

          // Remove card with animation
          invitationCard.style.transition = 'all 0.3s ease';
          invitationCard.style.transform = 'translateX(-100%)';
          invitationCard.style.opacity = '0';

          setTimeout(() => {
            invitationCard.remove();
            showToast(`Invitation "${invitationTitle}" deleted successfully!`);
          }, 300);
        } catch (error) {
          console.error('Error deleting invitation:', error);
          showToast('Error deleting invitation. Please try again.', 'error');
          button.innerHTML = originalContent;
          (button as HTMLButtonElement).disabled = false;
        }
      }
    });
  });

  // Guest name editing functionality
  document.querySelectorAll('.guest-name-input').forEach((input) => {
    const inputElement = input as HTMLInputElement;
    const guestItem = inputElement.closest('.guest-item');
    const saveButton = guestItem?.querySelector('.guest-action-btn.save');
    const originalValue = inputElement.getAttribute('data-original-value');

    inputElement.addEventListener('input', (e) => {
      const newValue = (e.target as HTMLInputElement).value;
      if (saveButton) {
        saveButton.classList.toggle('hidden', newValue === originalValue);
      }
    });

    inputElement.addEventListener('keypress', (e: KeyboardEvent) => {
      if (e.key === 'Enter') {
        inputElement.blur();
      }
    });

    saveButton?.addEventListener('click', async () => {
      const guestId = guestItem?.getAttribute('data-guest-id');
      const newName = inputElement.value;

      if (!guestId || !newName.trim()) return;

      try {
        const supabase = getSupabase();
        const { error } = await supabase.from('guests').update({ name: newName }).eq('id', guestId);

        if (error) throw error;

        // Update the original value and hide save button
        inputElement.setAttribute('data-original-value', newName);
        saveButton.classList.add('hidden');
        showToast('Guest name updated successfully!');
      } catch (error) {
        console.error('Error updating guest name:', error);
        showToast('Error updating guest name. Please try again.', 'error');
        // Revert to original value
        inputElement.value = originalValue || '';
      }
    });
  });

  // Guest deletion functionality
  document.querySelectorAll('.guest-action-btn.delete').forEach((button) => {
    button.addEventListener('click', async () => {
      const guestItem = button.closest('.guest-item') as HTMLElement;
      const guestId = guestItem?.getAttribute('data-guest-id');
      const guestNameInput = guestItem?.querySelector('.guest-name-input') as HTMLInputElement;
      const guestName = guestNameInput?.value;

      if (!guestId || !guestName) return;

      if (
        confirm(
          `Are you sure you want to remove "${guestName}" from this invitation?\n\nThis action cannot be undone.`
        )
      ) {
        const originalContent = button.innerHTML;

        try {
          button.innerHTML =
            '<svg class="animate-spin" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"></circle></svg>';
          (button as HTMLButtonElement).disabled = true;

          const supabase = getSupabase();
          const { error } = await supabase.from('guests').delete().eq('id', guestId);

          if (error) throw error;

          // Remove guest item with animation
          guestItem.style.transition = 'all 0.3s ease';
          guestItem.style.transform = 'translateX(-100%)';
          guestItem.style.opacity = '0';

          setTimeout(() => {
            guestItem.remove();
            showToast(`Guest "${guestName}" removed successfully!`);
          }, 300);
        } catch (error) {
          console.error('Error removing guest:', error);
          showToast('Error removing guest. Please try again.', 'error');
          button.innerHTML = originalContent;
          (button as HTMLButtonElement).disabled = false;
        }
      }
    });
  });

  // Toggle card expansion
  document.querySelectorAll('.btn-toggle').forEach((button) => {
    button.addEventListener('click', () => {
      const card = button.closest('.invitation-card');
      card?.classList.toggle('expanded');
    });
  });

  // Handle sent checkbox
  document.querySelectorAll('.sent-checkbox').forEach((checkbox) => {
    checkbox.addEventListener('change', async (e) => {
      const target = e.target as HTMLInputElement;
      const card = target.closest('.invitation-card') as HTMLElement | null;
      const invitationId = card?.dataset.id;

      if (!invitationId) return;

      try {
        const supabase = getSupabase();
        const { error } = await supabase
          .from('invitations')
          .update({ is_sent: true })
          .eq('id', invitationId);

        if (error) throw error;

        // Disable the checkbox
        target.disabled = true;
        showToast('Invitation marked as sent!');
      } catch (error) {
        console.error('Error updating invitation sent status:', error);
        showToast('Error updating invitation status', 'error');
        // Revert the checkbox
        target.checked = false;
      }
    });
  });
</script>
