---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { checkAuth } from '../../middleware/auth';
import { getSupabase } from '../../lib/supabase';
import Button from '../../components/Button.astro';

const { isAuthorized } = await checkAuth(Astro);

if (!isAuthorized) {
  return Astro.redirect('/login');
}

const supabase = getSupabase();
// Get all invitations with their guests
const { data: invitations } = await supabase
  .from('invitations')
  .select(
    `
    id,
    title,
    created_at,
    updated_at,
    guests (
      id,
      name,
      rsvp,
      menu,
      is_special_guest
    )
  `
  )
  .order('created_at', { ascending: false });
---

<AdminLayout title="Manage Invitations">
  <main class="invitations">
    <h1 class="heading heading--1">Manage Invitations</h1>

    <div class="invitations-grid">
      <section class="create-invitation">
        <h2 class="heading heading--2">Create New Invitation</h2>
        <form id="invitation-form" class="form">
          <div class="form-group">
            <label for="invitation-title" class="text">Invitation Title</label>
            <input
              type="text"
              id="invitation-title"
              name="invitation-title"
              required
              class="input"
              placeholder="e.g., Smith Family"
            />
          </div>

          <div class="form-group">
            <label for="guest-names" class="text">Guest Names (one per line)</label>
            <textarea
              id="guest-names"
              name="guest-names"
              required
              class="input input--textarea"
              placeholder="John Doe
Jane Doe"></textarea>
          </div>

          <div class="form-group">
            <label class="text">Special Guests</label>
            <div id="special-guests" class="special-guests">
              <!-- Special guest checkboxes will be added here -->
            </div>
          </div>

          <div class="form-actions">
            <Button text="Create Invitation" color="black" type="submit" />
          </div>
        </form>
      </section>

      <section class="invitations-list">
        <h2 class="heading heading--2">Existing Invitations</h2>
        <div id="invitations-container" class="invitations-container">
          {
            invitations?.map(
              (invitation: { id: string; title: string; created_at: string; guests: any[] }) => (
                <div class="invitation-card" data-id={invitation.id}>
                  <h3 class="heading heading--3">{invitation.title}</h3>
                  <div class="details">
                    <p class="text">www.aurarysantisecasan.com/{invitation.id}</p>
                    <div class="guests-list">
                      {invitation.guests?.map(
                        (guest: {
                          name: string;
                          is_special_guest: boolean;
                          rsvp: boolean | null;
                        }) => (
                          <div class="guest-item">
                            <span class="guest-name">
                              {guest.name}
                              {guest.is_special_guest && (
                                <span class="special-badge">Special Guest</span>
                              )}
                            </span>
                            <span
                              class={`rsvp-status ${guest.rsvp === true ? 'confirmed' : guest.rsvp === false ? 'declined' : 'pending'}`}
                            >
                              {guest.rsvp === true
                                ? 'Confirmed'
                                : guest.rsvp === false
                                  ? 'Declined'
                                  : 'Pending'}
                            </span>
                          </div>
                        )
                      )}
                    </div>
                  </div>
                  <div class="actions">
                    <button class="button button--delete" data-action="delete">
                      Delete
                    </button>
                  </div>
                </div>
              )
            )
          }
        </div>
      </section>
    </div>
  </main>
</AdminLayout>

<style>
  .invitations {
    padding: 3.2rem;
  }

  .invitations-grid {
    margin-top: 3.2rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(40rem, 1fr));
    gap: 4rem;
  }

  .create-invitation {
    background-color: #f8f9fa;
    padding: 2.4rem;
    border-radius: 0.8rem;
    box-shadow: 0 0 1rem rgba(0, 0, 0, 0.1);
  }

  .form {
    margin-top: 2.4rem;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
  }

  .input {
    padding: 1.2rem;
    border: 1px solid var(--black);
    border-radius: 0.4rem;
    font-size: 1.6rem;
    width: 100%;

    &--textarea {
      min-height: 10rem;
      resize: vertical;
    }
  }

  .special-guests {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
  }

  .special-guest-checkbox {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    font-size: 1.6rem;
  }

  .form-actions {
    margin-top: 1rem;
  }

  .invitations-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .invitation-card {
    background-color: white;
    padding: 2rem;
    border-radius: 0.8rem;
    box-shadow: 0 0 1rem rgba(0, 0, 0, 0.1);

    h3 {
      margin-bottom: 1.2rem;
      font-size: 1.8rem;
    }

    .details {
      display: grid;
      gap: 0.8rem;
      font-size: 1.4rem;
    }

    .guests-list {
      display: flex;
      flex-direction: column;
      gap: 0.8rem;
      margin-top: 1rem;
    }

    .guest-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.8rem;
      background-color: #f8f9fa;
      border-radius: 0.4rem;
    }

    .guest-name {
      display: flex;
      align-items: center;
      gap: 0.8rem;
    }

    .special-badge {
      background-color: #ffd700;
      color: var(--black);
      padding: 0.2rem 0.6rem;
      border-radius: 1rem;
      font-size: 1.2rem;
    }

    .rsvp-status {
      padding: 0.4rem 0.8rem;
      border-radius: 2rem;
      font-size: 1.2rem;

      &.confirmed {
        background-color: #28a745;
        color: white;
      }

      &.declined {
        background-color: #dc3545;
        color: white;
      }

      &.pending {
        background-color: #ffc107;
        color: var(--black);
      }
    }

    .actions {
      margin-top: 1.6rem;
      display: flex;
      gap: 1rem;
    }

    .button {
      padding: 0.8rem 1.6rem;
      border: none;
      border-radius: 0.4rem;
      cursor: pointer;
      font-size: 1.4rem;
      transition: opacity 0.2s;

      &:hover {
        opacity: 0.8;
      }

      &--delete {
        background-color: #dc3545;
        color: white;
      }
    }
  }
</style>

<script>
  import { getSupabase } from '../../lib/supabase';

  const form = document.getElementById('invitation-form');
  const titleInput = document.getElementById('invitation-title') as HTMLInputElement;
  const guestNamesTextarea = document.getElementById('guest-names') as HTMLTextAreaElement;
  const specialGuestsDiv = document.getElementById('special-guests');

  // Update special guests checkboxes when guest names change
  guestNamesTextarea?.addEventListener('input', () => {
    if (!specialGuestsDiv) return;

    const guestNames = guestNamesTextarea.value
      .split('\n')
      .map((name) => name.trim())
      .filter((name) => name);

    specialGuestsDiv.innerHTML = guestNames
      .map(
        (name, index) => `
          <label class="special-guest-checkbox">
            <input type="checkbox" name="special-guest-${index}" value="${name}">
            ${name}
          </label>
        `
      )
      .join('');
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const guestNames = guestNamesTextarea.value
      .split('\n')
      .map((name) => name.trim())
      .filter((name) => name);

    if (guestNames.length === 0) {
      alert('Please enter at least one guest name');
      return;
    }

    try {
      // Create the invitation
      const supabase = getSupabase();
      const { data: invitation, error: invitationError } = await supabase
        .from('invitations')
        .insert({ title: titleInput.value })
        .select()
        .single();

      if (invitationError) throw invitationError;

      // Get special guests
      const specialGuests = new Set(
        Array.from(document.querySelectorAll('input[type="checkbox"]:checked')).map(
          (cb) => (cb as HTMLInputElement).value
        )
      );

      // Create the guests
      const { error: guestsError } = await supabase.from('guests').insert(
        guestNames.map((name) => ({
          invitation_id: invitation.id,
          name,
          is_special_guest: specialGuests.has(name),
        }))
      );

      if (guestsError) {
        // Clean up the invitation if guest creation fails
        await supabase.from('invitations').delete().eq('id', invitation.id);
        throw guestsError;
      }

      // Reset form and reload page
      (form as HTMLFormElement).reset();
      window.location.reload();
    } catch (error) {
      console.error('Error creating invitation:', error);
      alert('Error creating invitation. Please try again.');
    }
  });

  // Handle delete button clicks
  document.querySelectorAll('.button--delete').forEach((button) => {
    button.addEventListener('click', async (e) => {
      const target = e.target as HTMLButtonElement;
      const card = target.closest('.invitation-card') as HTMLDivElement;
      const id = card?.dataset.id;

      if (!id) return;

      if (confirm('Are you sure you want to delete this invitation?')) {
        try {
          const supabase = getSupabase();
          const { error } = await supabase.from('invitations').delete().eq('id', id);

          if (error) throw error;

          // Remove the card from the UI
          card.remove();
        } catch (error) {
          console.error('Error deleting invitation:', error);
          alert('Error deleting invitation. Please try again.');
        }
      }
    });
  });
</script>
