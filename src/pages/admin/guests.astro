---
import '../../styles/index.css';

import AdminLayout from '../../layouts/AdminLayout.astro';
import { checkAuth } from '../../middleware/auth';
import { getSupabase } from '../../lib/supabase';
import type { Database } from '../../lib/database.types';
import { Users, Search, Save, CheckCircle, Clock, Trash2, Mail } from 'lucide-astro';

const { isAuthorized } = await checkAuth(Astro);

if (!isAuthorized) {
  return Astro.redirect('/login');
}

const supabase = getSupabase();

type GuestWithInvitation = Database['public']['Tables']['guests']['Row'] & {
  invitation: Database['public']['Tables']['invitations']['Row'] | null;
};

// Get all guests with their invitation information
const { data: guests, error } = (await supabase
  .from('guests')
  .select(
    `
    id,
    name,
    rsvp,
    menu,
    created_at,
    updated_at,
    invitation:invitation_id (
      id,
      title,
      is_special_invitation,
      is_sent,
      created_at,
      updated_at
    )
  `
  )
  .order('name', { ascending: true })) as { data: GuestWithInvitation[] | null; error: any };

if (error) {
  console.error('Error fetching guests:', error);
  throw error;
}

// Calculate statistics
const totalGuests = guests?.length || 0;
const confirmedGuests = guests?.filter((g) => g.rsvp === true).length || 0;
const pendingGuests = guests?.filter((g) => g.rsvp === null).length || 0;
const declinedGuests = guests?.filter((g) => g.rsvp === false).length || 0;
---

<AdminLayout title="Manage Guests">
  <main class="guests-dashboard">
    <!-- Header -->
    <header class="dashboard-header">
      <div class="header-content">
        <div class="header-text">
          <h1 class="dashboard-title">Guest Management</h1>
          <p class="dashboard-subtitle">Manage and track all wedding guests</p>
        </div>
        <div class="stats-summary">
          <div class="stat-item">
            <span class="stat-number">{totalGuests}</span>
            <span class="stat-label">Total</span>
          </div>
          <div class="stat-item stat-item--confirmed">
            <span class="stat-number">{confirmedGuests}</span>
            <span class="stat-label">Confirmed</span>
          </div>
          <div class="stat-item stat-item--pending">
            <span class="stat-number">{pendingGuests}</span>
            <span class="stat-label">Pending</span>
          </div>
          <div class="stat-item stat-item--declined">
            <span class="stat-number">{declinedGuests}</span>
            <span class="stat-label">Declined</span>
          </div>
        </div>
      </div>
    </header>

    <!-- Guests Table -->
    <section class="panel">
      <div class="panel-header">
        <div class="panel-header-content">
          <div class="panel-icon">
            <Users size={24} />
          </div>
          <div class="panel-info">
            <h2 class="panel-title">All Guests</h2>
            <p class="panel-description">View and manage guest details</p>
          </div>
        </div>
        <div class="panel-actions">
          <div class="filter-buttons">
            <button class="filter-btn active" data-filter="all">All</button>
            <button class="filter-btn" data-filter="confirmed">Confirmed</button>
            <button class="filter-btn" data-filter="pending">Pending</button>
            <button class="filter-btn" data-filter="declined">Declined</button>
          </div>
          <div class="search-box">
            <Search size={18} class="search-icon" />
            <input
              type="text"
              id="search-guests"
              placeholder="Search guests..."
              class="search-input"
            />
          </div>
        </div>
      </div>

      <div class="table-wrapper">
        <div class="table-container">
          <table class="guests-table">
            <thead>
              <tr>
                <th class="th-name">Guest Name</th>
                <th class="th-invitation">Invitation</th>
                <th class="th-rsvp">RSVP Status</th>
                <th class="th-menu">Menu Choice</th>
                <th class="th-actions">Actions</th>
              </tr>
            </thead>
            <tbody>
              {
                guests?.map((guest) => (
                  <tr
                    class="guest-row"
                    data-guest-id={guest.id}
                    data-rsvp={guest.rsvp === null ? 'null' : guest.rsvp}
                  >
                    <td class="td-name">
                      <input
                        type="text"
                        class="guest-name-input"
                        value={guest.name}
                        data-original-value={guest.name}
                      />
                    </td>
                    <td class="td-invitation">
                      <div class="invitation-cell">
                        <span class="invitation-title">
                          {guest.invitation?.title || 'No invitation'}
                        </span>
                        <div class="invitation-badges">
                          {guest.invitation?.is_special_invitation && (
                            <span class="badge badge--special">Special</span>
                          )}
                          {guest.invitation?.is_sent && (
                            <span class="badge badge--sent">
                              <Mail size={14} />
                              <span>Sent</span>
                            </span>
                          )}
                        </div>
                      </div>
                    </td>
                    <td class="td-rsvp">
                      <div class="select-wrapper">
                        <select>
                          <option value="true" selected={guest.rsvp === true}>
                            Confirmed
                          </option>
                          <option value="false" selected={guest.rsvp === false}>
                            Declined
                          </option>
                          <option value="null" selected={guest.rsvp === null}>
                            Pending
                          </option>
                        </select>
                      </div>
                    </td>
                    <td class="td-menu">
                      <div class="select-wrapper">
                        <select class="menu-select" value={guest.menu || ''}>
                          <option value="">Not Selected</option>
                          <option value="1">Vegetarian</option>
                          <option value="2">Non-Vegetarian</option>
                          <option value="3">Vegan</option>
                        </select>
                      </div>
                    </td>
                    <td class="td-actions">
                      <div class="row-actions">
                        <button class="btn btn-save hidden" title="Save changes">
                          <Save size={16} />
                          <span>Save</span>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>
      </div>
    </section>

    <!-- Toast Notification -->
    <div id="toast" class="toast">
      <div class="toast-content">
        <div class="toast-icon"></div>
        <span class="toast-message"></span>
      </div>
    </div>
  </main>
</AdminLayout>

<style>
  .guests-dashboard {
    max-width: 100%;
    margin: 0 auto;
    padding: 2rem;
    font-family:
      -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    background: #fafbfc;
    min-height: 100vh;
  }

  /* Header Styles */
  .dashboard-header {
    margin-bottom: 3rem;
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 2rem;
  }

  .header-text {
    flex: 1;
  }

  .dashboard-title {
    font-size: 3.75rem;
    font-weight: 700;
    color: var(--gray-800);
    margin: 0 0 0.75rem 0;
    letter-spacing: -0.025em;
  }

  .dashboard-subtitle {
    font-size: 1.7rem;
    color: var(--gray-600);
    margin: 0;
    font-weight: 400;
  }

  .stats-summary {
    display: flex;
    gap: 2rem;
    align-items: center;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem 1.5rem;
    background: var(--white);
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border-left: 4px solid var(--gray-300);
    min-width: 80px;
  }

  .stat-item--confirmed {
    border-left-color: #10b981;
  }

  .stat-item--pending {
    border-left-color: #f59e0b;
  }

  .stat-item--declined {
    border-left-color: #ef4444;
  }

  .stat-number {
    font-size: 2.8rem;
    font-weight: 700;
    color: var(--gray-800);
    line-height: 1;
  }

  .stat-label {
    font-size: 1.3rem;
    color: var(--gray-600);
    margin-top: 0.375rem;
    font-weight: 500;
  }

  /* Panel Styles */
  .panel {
    background: var(--white);
    border-radius: 1rem;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
    overflow: hidden;
    border: 1px solid var(--gray-200);
  }

  .panel-header {
    padding: 2rem;
    border-bottom: 1px solid var(--gray-200);
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  }

  .panel-header-content {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .panel-icon {
    width: 3rem;
    height: 3rem;
    background: var(--blue);
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--white);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .panel-info {
    flex: 1;
  }

  .panel-title {
    font-size: 2.25rem;
    font-weight: 600;
    color: var(--gray-800);
    margin: 0;
  }

  .panel-description {
    font-size: 1.5rem;
    color: var(--gray-600);
    margin: 0.375rem 0 0;
  }

  /* Search Styles */
  .search-box {
    position: relative;
  }

  .search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--gray-400);
    pointer-events: none;
  }

  .search-input {
    padding: 1.125rem 1.5rem 1.125rem 4.5rem;
    border: 2px solid var(--gray-200);
    border-radius: 0.75rem;
    font-size: 1.5rem;
    width: 24rem;
    color: var(--gray-800);
    background: var(--white);
    transition: all 0.2s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--blue);
    box-shadow: 0 0 0 4px rgba(65, 76, 122, 0.1);
  }

  .search-input::placeholder {
    color: var(--gray-400);
  }

  /* Table Styles */
  .table-wrapper {
    background: var(--white);
  }

  .table-container {
    overflow-x: auto;
    max-height: 70vh;
    overflow-y: auto;
  }

  .guests-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.95rem;
  }

  .guests-table thead {
    position: sticky;
    top: 0;
    z-index: 10;
    background: var(--white);
  }

  .guests-table th {
    text-align: left;
    padding: 1.875rem 2.25rem;
    background: var(--gray-50);
    border-bottom: 2px solid var(--gray-200);
    font-weight: 600;
    color: var(--gray-700);
    font-size: 1.3rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .guests-table td {
    padding: 1.875rem 2.25rem;
    border-bottom: 1px solid var(--gray-200);
    color: var(--gray-800);
    vertical-align: middle;
    font-size: 1.4rem;
  }

  .guest-row {
    transition: background-color 0.2s ease;
  }

  .guest-row:hover {
    background: #f8fafc;
  }

  /* Column specific styles */
  .th-name,
  .td-name {
    width: 25%;
  }

  .th-invitation,
  .td-invitation {
    width: 30%;
  }

  .th-rsvp,
  .td-rsvp {
    width: 15%;
  }

  .th-menu,
  .td-menu {
    width: 15%;
  }

  .th-actions,
  .td-actions {
    width: 15%;
    text-align: center;
  }

  /* Input Styles */
  .guest-name-input {
    width: 100%;
    padding: 1.125rem;
    border: 2px solid transparent;
    border-radius: 0.75rem;
    font-size: 1.5rem;
    background: transparent;
    color: var(--gray-800);
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .guest-name-input:hover {
    background: #f8fafc;
  }

  .guest-name-input:focus {
    border-color: var(--blue);
    background: var(--white);
    outline: none;
    box-shadow: 0 0 0 3px rgba(65, 76, 122, 0.1);
  }

  /* Invitation Cell */
  .invitation-cell {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .invitation-title {
    font-weight: 500;
    color: var(--gray-800);
    font-size: 1.4rem;
  }

  .invitation-badges {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .badge {
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.9375rem;
    border-radius: 1.5rem;
    font-size: 1.1rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .badge--special {
    background: linear-gradient(135deg, #fbbf24, #f59e0b);
    color: var(--white);
  }

  .badge--sent {
    background: #dcfce7;
    color: #166534;
  }

  /* Select Styles */
  .select-wrapper {
    position: relative;
    width: 100%;
  }

  .select-wrapper select {
    width: 100%;
    appearance: none;
    background: transparent;
    border: none;
    padding: 1.125rem;
    font-size: 1.4rem;
    color: var(--gray-800);
    cursor: pointer;
    outline: none;
  }

  .select-wrapper::after {
    content: '';
    position: absolute;
    right: 1.125rem;
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-top: 6px solid var(--gray-600);
    pointer-events: none;
  }

  .select-wrapper {
    padding: 0;
    border: 2px solid var(--gray-200);
    border-radius: 0.75rem;
    background: var(--white);
    transition: all 0.2s ease;
  }

  .select-wrapper:hover {
    border-color: var(--gray-300);
  }

  .select-wrapper:focus-within {
    border-color: var(--blue);
    box-shadow: 0 0 0 3px rgba(65, 76, 122, 0.1);
  }

  .menu-select {
    width: 100%;
    padding: 1.125rem;
    border: 2px solid var(--gray-200);
    border-radius: 0.75rem;
    font-size: 1.4rem;
    background: var(--white);
    color: var(--gray-800);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .menu-select:focus {
    outline: none;
    border-color: var(--blue);
    box-shadow: 0 0 0 3px rgba(65, 76, 122, 0.1);
  }

  .menu-select:hover {
    border-color: var(--gray-300);
  }

  /* Action Buttons */
  .row-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1.125rem 1.5rem;
    border: none;
    border-radius: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 500;
    font-size: 1.3rem;
  }

  .btn-save {
    background: #dcfce7;
    color: #166534;
    border: 2px solid #bbf7d0;
  }

  .btn-save:hover {
    background: #bbf7d0;
    border-color: #86efac;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .btn-save.hidden {
    display: none;
  }

  /* Toast Styles */
  .toast {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    min-width: 300px;
    background: var(--white);
    border-radius: 0.75rem;
    box-shadow:
      0 10px 15px -3px rgba(0, 0, 0, 0.1),
      0 4px 6px -2px rgba(0, 0, 0, 0.05);
    transform: translateY(100%);
    opacity: 0;
    transition: all 0.3s ease;
    border: 1px solid var(--gray-200);
    z-index: 1000;
  }

  .toast.show {
    transform: translateY(0);
    opacity: 1;
  }

  .toast-content {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 1.25rem;
  }

  .toast-icon {
    width: 1.25rem;
    height: 1.25rem;
    border-radius: 50%;
    flex-shrink: 0;
  }

  .toast-message {
    font-weight: 500;
    color: var(--gray-800);
    font-size: 1.4rem;
  }

  .toast.success .toast-icon {
    background: #10b981;
  }

  .toast.success {
    border-left: 4px solid #10b981;
  }

  .toast.error .toast-icon {
    background: #ef4444;
  }

  .toast.error {
    border-left: 4px solid #ef4444;
  }

  /* Filter Buttons Styles */
  .filter-buttons {
    display: flex;
    gap: 0.5rem;
    margin-right: 1rem;
  }

  .filter-btn {
    padding: 0.75rem 1.5rem;
    border: 2px solid var(--gray-200);
    border-radius: 0.75rem;
    background: var(--white);
    color: var(--gray-600);
    font-weight: 500;
    font-size: 1.3rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .filter-btn:hover {
    border-color: var(--blue);
    color: var(--blue);
  }

  .filter-btn.active {
    background: var(--blue);
    color: var(--white);
    border-color: var(--blue);
  }

  .panel-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .guests-dashboard {
      padding: 1rem;
    }

    .header-content {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.5rem;
    }

    .stats-summary {
      width: 100%;
      justify-content: space-between;
    }

    .search-input {
      width: 100%;
      max-width: 450px;
    }

    .dashboard-title {
      font-size: 3rem;
    }
  }

  @media (max-width: 768px) {
    .dashboard-title {
      font-size: 2.5rem;
    }

    .panel-header {
      padding: 1.5rem;
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .panel-header-content {
      width: 100%;
    }

    .panel-actions {
      flex-direction: column;
      width: 100%;
    }

    .filter-buttons {
      width: 100%;
      margin-right: 0;
      margin-bottom: 1rem;
      overflow-x: auto;
      padding-bottom: 0.5rem;
    }

    .search-input {
      width: 100%;
    }

    .stats-summary {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }

    .guests-table th,
    .guests-table td {
      padding: 1.5rem;
      font-size: 1.3rem;
    }

    .btn {
      padding: 0.75rem 1.125rem;
      font-size: 1.2rem;
    }
  }

  @media (max-width: 640px) {
    .stats-summary {
      flex-direction: column;
      width: 100%;
      gap: 1rem;
    }

    .stat-item {
      width: 100%;
      flex-direction: row;
      justify-content: space-between;
      padding: 1rem;
    }

    .table-container {
      max-height: 60vh;
    }

    .toast {
      bottom: 1rem;
      right: 1rem;
      left: 1rem;
      min-width: auto;
    }
  }
</style>

<script>
  import { getSupabase } from '../../lib/supabase';

  // Toast notification function
  function showToast(message: string, type: 'success' | 'error' = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = toast?.querySelector('.toast-message');
    if (!toast || !toastMessage) return;

    toastMessage.textContent = message;
    toast.className = `toast show ${type}`;

    setTimeout(() => {
      toast.className = 'toast';
    }, 4000);
  }

  // Search and filter functionality
  const searchInput = document.getElementById('search-guests') as HTMLInputElement;
  const guestRows = document.querySelectorAll('.guest-row');
  const filterButtons = document.querySelectorAll('.filter-btn');
  let currentFilter = 'all';

  function filterGuests() {
    const searchTerm = searchInput?.value.toLowerCase() || '';

    guestRows.forEach((row) => {
      const nameInput = row.querySelector('.guest-name-input') as HTMLInputElement;
      const invitationCell = row.querySelector('.invitation-cell');
      const name = nameInput?.value.toLowerCase() || '';
      const invitation = invitationCell?.textContent?.toLowerCase() || '';
      const rsvpStatus = row.getAttribute('data-rsvp');

      const matchesSearch = name.includes(searchTerm) || invitation.includes(searchTerm);
      const matchesFilter =
        currentFilter === 'all' ||
        (currentFilter === 'confirmed' && rsvpStatus === 'true') ||
        (currentFilter === 'pending' && rsvpStatus === 'null') ||
        (currentFilter === 'declined' && rsvpStatus === 'false');

      console.log('Matches Filter:', matchesFilter, 'Current Filter:', currentFilter);

      (row as HTMLElement).style.display = matchesSearch && matchesFilter ? '' : 'none';
    });
  }

  // Search event listener
  searchInput?.addEventListener('input', filterGuests);

  // Filter buttons event listeners
  filterButtons.forEach((button) => {
    button.addEventListener('click', () => {
      // Update active state
      filterButtons.forEach((btn) => btn.classList.remove('active'));
      button.classList.add('active');

      // Update current filter and apply filtering
      currentFilter = button.getAttribute('data-filter') || 'all';
      filterGuests();
    });
  });

  // Track changes and show save button
  function trackChanges(row: Element) {
    const saveBtn = row.querySelector('.btn-save');
    const nameInput = row.querySelector('.guest-name-input') as HTMLInputElement;
    const rsvpSelect = row.querySelector('.rsvp-select') as HTMLSelectElement;
    const menuSelect = row.querySelector('.menu-select') as HTMLSelectElement;

    const originalName = nameInput?.getAttribute('data-original-value');
    const originalRSVP = rsvpSelect?.getAttribute('data-original-value');
    const originalMenu = menuSelect?.getAttribute('data-original-value');

    const hasChanges =
      nameInput?.value !== originalName ||
      rsvpSelect?.value !== originalRSVP ||
      menuSelect?.value !== originalMenu;

    saveBtn?.classList.toggle('hidden', !hasChanges);
  }

  // Handle input changes
  document.querySelectorAll('.guest-row').forEach((row) => {
    const inputs = row.querySelectorAll('input, select');
    inputs.forEach((input) => {
      const inputElement = input as HTMLInputElement | HTMLSelectElement;
      // Store original values
      inputElement.setAttribute('data-original-value', inputElement.value);

      input.addEventListener('input', () => trackChanges(row));
      input.addEventListener('change', () => trackChanges(row));
    });
  });

  // Handle save
  document.querySelectorAll('.btn-save').forEach((button) => {
    button.addEventListener('click', async () => {
      const row = button.closest('.guest-row');
      if (!row) return;

      const guestId = row.getAttribute('data-guest-id');
      const nameInput = row.querySelector('.guest-name-input') as HTMLInputElement;
      const rsvpSelect = row.querySelector('.rsvp-select') as HTMLSelectElement;
      const menuSelect = row.querySelector('.menu-select') as HTMLSelectElement;

      // Add loading state
      button.classList.add('loading');
      (button as HTMLButtonElement).disabled = true;

      try {
        const supabase = getSupabase();
        const { error } = await supabase
          .from('guests')
          .update({
            name: nameInput.value,
            rsvp: rsvpSelect.value === 'null' ? null : rsvpSelect.value === 'true',
            menu: menuSelect.value === '' ? null : parseInt(menuSelect.value),
            updated_at: new Date().toISOString(),
          })
          .eq('id', guestId);

        if (!error) {
          // Update the row's data-rsvp attribute
          const newRsvpValue = rsvpSelect.value === 'null' ? 'null' : rsvpSelect.value === 'true';
          row.setAttribute('data-rsvp', rsvpSelect.value);
          // Refresh the filters to show the updated status
          filterGuests();
        }

        if (error) throw error;

        // Update original values
        nameInput.setAttribute('data-original-value', nameInput.value);
        rsvpSelect.setAttribute('data-original-value', rsvpSelect.value);
        menuSelect.setAttribute('data-original-value', menuSelect.value);

        // Hide save button
        button.classList.add('hidden');

        showToast('Guest updated successfully!', 'success');
      } catch (error) {
        console.error('Error updating guest:', error);
        showToast('Error updating guest. Please try again.', 'error');
      } finally {
        button.classList.remove('loading');
        (button as HTMLButtonElement).disabled = false;
      }
    });
  });
</script>
