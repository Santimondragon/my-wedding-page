---
import AdminLayout from '../layouts/AdminLayout.astro';
import { checkAuth } from '../middleware/auth';
import { getSupabase } from '../lib/supabase';
import type { Database } from '../lib/database.types';
import { Users, Search, Save, CheckCircle, Clock, Trash2, Mail } from 'lucide-astro';
import '../styles/index.css';

const { isAuthorized } = await checkAuth(Astro);

if (!isAuthorized) {
  return Astro.redirect('/login');
}

const supabase = getSupabase();

type GuestWithInvitation = Database['public']['Tables']['guests']['Row'] & {
  invitation: Database['public']['Tables']['invitations']['Row'] | null;
};

// Get all guests with their invitation information
const { data: guests, error } = (await supabase
  .from('guests')
  .select(
    `
    id,
    name,
    rsvp,
    menu,
    created_at,
    updated_at,
    invitation:invitation_id (
      id,
      title,
      is_special_invitation,
      is_sent,
      created_at,
      updated_at
    )
  `
  )
  .order('name', { ascending: true })) as { data: GuestWithInvitation[] | null; error: any };

if (error) {
  console.error('Error fetching guests:', error);
  throw error;
}

console.log('Guests data:', guests);
console.log('Number of guests:', guests?.length || 0);
console.log('First guest:', guests?.[0]);

// Calculate statistics
const totalGuests = guests?.length || 0;
const confirmedGuests = guests?.filter((g) => g.rsvp === true).length || 0;
const pendingGuests = guests?.filter((g) => g.rsvp === null).length || 0;
const declinedGuests = guests?.filter((g) => g.rsvp === false).length || 0;
---

<AdminLayout title="Manage Guests">
  <main class="guests-dashboard">
    <!-- Header -->
    <header class="dashboard-header">
      <div class="header-content">
        <h1 class="dashboard-title">Guest Management</h1>
        <p class="dashboard-subtitle">Manage and track all wedding guests</p>
      </div>
    </header>

    <!-- Statistics Cards -->
    <section class="stats-grid">
      <div class="stat-card">
        <div class="stat-icon stat-icon--primary">
          <Users size={24} />
        </div>
        <div class="stat-content">
          <h3 class="stat-number">{totalGuests}</h3>
          <p class="stat-label">Total Guests</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon stat-icon--success">
          <CheckCircle size={24} />
        </div>
        <div class="stat-content">
          <h3 class="stat-number">{confirmedGuests}</h3>
          <p class="stat-label">Confirmed</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon stat-icon--warning">
          <Clock size={24} />
        </div>
        <div class="stat-content">
          <h3 class="stat-number">{pendingGuests}</h3>
          <p class="stat-label">Pending</p>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon stat-icon--danger">
          <Trash2 size={24} />
        </div>
        <div class="stat-content">
          <h3 class="stat-number">{declinedGuests}</h3>
          <p class="stat-label">Declined</p>
        </div>
      </div>
    </section>

    <!-- Guests Table -->
    <section class="panel">
      <div class="panel-header">
        <div class="panel-header-content">
          <div class="panel-icon">
            <Users size={20} />
          </div>
          <div>
            <h2 class="panel-title">All Guests</h2>
            <p class="panel-description">View and manage guest details</p>
          </div>
        </div>
        <div class="panel-actions">
          <div class="search-box">
            <Search size={16} class="search-icon" />
            <input
              type="text"
              id="search-guests"
              placeholder="Search guests..."
              class="search-input"
            />
          </div>
        </div>
      </div>

      <div class="table-container">
        <table class="guests-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Invitation</th>
              <th>RSVP Status</th>
              <th>Menu Choice</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {
              guests?.map((guest) => (
                <tr class="guest-row" data-guest-id={guest.id}>
                  <td>
                    <input
                      type="text"
                      class="guest-name-input"
                      value={guest.name}
                      data-original-value={guest.name}
                    />
                  </td>
                  <td>
                    <div class="invitation-cell">
                      <span>{guest.invitation?.title}</span>
                      {guest.invitation?.is_special_invitation && (
                        <span class="special-badge">Special</span>
                      )}
                      {guest.invitation?.is_sent && (
                        <span class="sent-badge">
                          <Mail size={12} />
                        </span>
                      )}
                    </div>
                  </td>
                  <td>
                    <select
                      class="rsvp-select"
                      value={guest.rsvp === null ? '' : guest.rsvp.toString()}
                    >
                      <option value="">Pending</option>
                      <option value="true">Confirmed</option>
                      <option value="false">Declined</option>
                    </select>
                  </td>
                  <td>
                    <select class="menu-select" value={guest.menu || ''}>
                      <option value="">Not Selected</option>
                      <option value="1">Option 1</option>
                      <option value="2">Option 2</option>
                      <option value="3">Option 3</option>
                    </select>
                  </td>
                  <td>
                    <div class="row-actions">
                      <button class="btn btn-icon btn-save hidden" title="Save changes">
                        <Save size={16} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </section>

    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>
  </main>
</AdminLayout>

<style>
  /* Import variables */
  :root {
    --white: #ffffff;
    --blue: #3b82f6;
    --red: #dc2626;
    --green: #059669;
    --yellow: #f59e0b;
    --gray-50: #f8fafc;
    --gray-100: #f1f5f9;
    --gray-200: #e2e8f0;
    --gray-300: #cbd5e1;
    --gray-400: #94a3b8;
    --gray-500: #64748b;
    --gray-600: #475569;
    --gray-700: #334155;
    --gray-800: #1e293b;
    --gray-900: #0f172a;
  }

  .guests-dashboard {
    max-width: 100%;
    margin: 0 auto;
  }

  .dashboard-header {
    margin-bottom: 2rem;
  }

  .dashboard-title {
    font-size: 1.875rem;
    font-weight: 600;
    color: var(--gray-800);
    margin: 0;
  }

  .dashboard-subtitle {
    font-size: 1rem;
    color: var(--gray-500);
    margin: 0.5rem 0 0;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: var(--white);
    padding: 1.5rem;
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .stat-icon {
    width: 3rem;
    height: 3rem;
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .stat-icon--primary {
    background: #eff6ff;
    color: var(--blue);
  }

  .stat-icon--success {
    background: #dcfce7;
    color: var(--green);
  }

  .stat-icon--warning {
    background: #fef3c7;
    color: var(--yellow);
  }

  .stat-icon--danger {
    background: #fee2e2;
    color: var(--red);
  }

  .stat-number {
    font-size: 1.875rem;
    font-weight: 600;
    color: var(--gray-800);
    margin: 0;
  }

  .stat-label {
    font-size: 0.875rem;
    color: var(--gray-500);
    margin: 0.25rem 0 0;
  }

  .panel {
    background: var(--white);
    border-radius: 0.75rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .panel-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--gray-200);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .panel-header-content {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .panel-icon {
    width: 2.5rem;
    height: 2.5rem;
    background: var(--gray-100);
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--gray-600);
  }

  .panel-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--gray-800);
    margin: 0;
  }

  .panel-description {
    font-size: 0.875rem;
    color: var(--gray-500);
    margin: 0.25rem 0 0;
  }

  .search-box {
    position: relative;
  }

  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--gray-400);
    pointer-events: none;
  }

  .search-input {
    padding: 0.5rem 0.75rem 0.5rem 2.5rem;
    border: 1px solid var(--gray-200);
    border-radius: 0.5rem;
    font-size: 0.875rem;
    width: 16rem;
    color: var(--gray-800);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--blue);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .table-container {
    overflow-x: auto;
    margin: 0 1.5rem 1.5rem;
  }

  .guests-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.875rem;
  }

  .guests-table th {
    text-align: left;
    padding: 1rem;
    background: var(--gray-50);
    border-bottom: 2px solid var(--gray-200);
    font-weight: 600;
    color: var(--gray-600);
  }

  .guests-table td {
    padding: 1rem;
    border-bottom: 1px solid var(--gray-200);
    color: var(--gray-800);
  }

  .guest-name-input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid transparent;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    background: transparent;
    color: var(--gray-800);
  }

  .guest-name-input:focus {
    border-color: var(--blue);
    background: var(--white);
    outline: none;
  }

  .invitation-cell {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .special-badge {
    background: linear-gradient(135deg, #fbbf24, #f59e0b);
    color: var(--white);
    padding: 0.25rem 0.5rem;
    border-radius: 0.75rem;
    font-size: 0.75rem;
  }

  .sent-badge {
    color: var(--green);
  }

  .rsvp-select,
  .menu-select {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--gray-200);
    border-radius: 0.25rem;
    font-size: 0.875rem;
    background: var(--white);
    color: var(--gray-800);
  }

  .row-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-icon {
    width: 2rem;
    height: 2rem;
  }

  .btn-save {
    background: #dcfce7;
    color: var(--green);
  }

  .btn-save:hover {
    background: #bbf7d0;
  }

  .btn-save.hidden {
    display: none;
  }

  /* Toast Styles */
  .toast {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    padding: 1rem 1.5rem;
    background: var(--white);
    border-radius: 0.5rem;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
    transform: translateY(100%);
    opacity: 0;
    transition: all 0.3s;
  }

  .toast.show {
    transform: translateY(0);
    opacity: 1;
  }

  .toast.success {
    background: #dcfce7;
    color: var(--green);
  }

  .toast.error {
    background: #fee2e2;
    color: var(--red);
  }
</style>

<script>
  import { getSupabase } from '../lib/supabase';

  // Toast notification function
  function showToast(message: string, type: 'success' | 'error' = 'success') {
    const toast = document.getElementById('toast');
    if (!toast) return;

    toast.textContent = message;
    toast.className = `toast show ${type}`;

    setTimeout(() => {
      toast.className = 'toast';
    }, 3000);
  }

  // Search functionality
  const searchInput = document.getElementById('search-guests') as HTMLInputElement;
  const guestRows = document.querySelectorAll('.guest-row');

  searchInput?.addEventListener('input', (e) => {
    const searchTerm = (e.target as HTMLInputElement).value.toLowerCase();

    guestRows.forEach((row) => {
      const nameInput = row.querySelector('.guest-name-input') as HTMLInputElement;
      const invitationCell = row.querySelector('.invitation-cell');

      const name = nameInput?.value.toLowerCase() || '';
      const invitation = invitationCell?.textContent?.toLowerCase() || '';

      const isVisible = name.includes(searchTerm) || invitation.includes(searchTerm);
      (row as HTMLElement).style.display = isVisible ? '' : 'none';
    });
  });

  // Track changes and show save button
  function trackChanges(row: Element) {
    const saveBtn = row.querySelector('.btn-save');
    const nameInput = row.querySelector('.guest-name-input') as HTMLInputElement;
    const rsvpSelect = row.querySelector('.rsvp-select') as HTMLSelectElement;
    const menuSelect = row.querySelector('.menu-select') as HTMLSelectElement;

    const originalName = nameInput?.getAttribute('data-original-value');
    const originalRSVP = rsvpSelect?.getAttribute('data-original-value');
    const originalMenu = menuSelect?.getAttribute('data-original-value');

    const hasChanges =
      nameInput?.value !== originalName ||
      rsvpSelect?.value !== originalRSVP ||
      menuSelect?.value !== originalMenu;

    saveBtn?.classList.toggle('hidden', !hasChanges);
  }

  // Handle input changes
  document.querySelectorAll('.guest-row').forEach((row) => {
    const inputs = row.querySelectorAll('input, select');
    inputs.forEach((input) => {
      const inputElement = input as HTMLInputElement | HTMLSelectElement;
      // Store original values
      inputElement.setAttribute('data-original-value', inputElement.value);

      input.addEventListener('input', () => trackChanges(row));
      input.addEventListener('change', () => trackChanges(row));
    });
  });

  // Handle save
  document.querySelectorAll('.btn-save').forEach((button) => {
    button.addEventListener('click', async () => {
      const row = button.closest('.guest-row');
      if (!row) return;

      const guestId = row.getAttribute('data-guest-id');
      const nameInput = row.querySelector('.guest-name-input') as HTMLInputElement;
      const rsvpSelect = row.querySelector('.rsvp-select') as HTMLSelectElement;
      const menuSelect = row.querySelector('.menu-select') as HTMLSelectElement;

      try {
        const supabase = getSupabase();
        const { error } = await supabase
          .from('guests')
          .update({
            name: nameInput.value,
            rsvp: rsvpSelect.value === '' ? null : rsvpSelect.value === 'true',
            menu: menuSelect.value === '' ? null : parseInt(menuSelect.value),
            updated_at: new Date().toISOString(),
          })
          .eq('id', guestId);

        if (error) throw error;

        // Update original values
        nameInput.setAttribute('data-original-value', nameInput.value);
        rsvpSelect.setAttribute('data-original-value', rsvpSelect.value);
        menuSelect.setAttribute('data-original-value', menuSelect.value);

        // Hide save button
        button.classList.add('hidden');

        showToast('Guest updated successfully!');
      } catch (error) {
        console.error('Error updating guest:', error);
        showToast('Error updating guest. Please try again.', 'error');
      }
    });
  });
</script>
